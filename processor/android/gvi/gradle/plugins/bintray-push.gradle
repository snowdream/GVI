apply plugin: 'com.github.dcendents.android-maven'
apply plugin: 'com.jfrog.bintray'
apply from: "${rootDir}/gradle/plugins/util.gradle"

group = optProperty("POM_GROUP_ID")
archivesBaseName = optProperty("POM_NAME")
version =  optProperty("POM_VERSION")

configurations {
    archives {
        extendsFrom configurations.default
    }
}

install {
    repositories.mavenInstaller {
        configurePOM(pom)
    }
}

bintray {
    user = optProperty("BINTRAY_USER")
    key = optProperty("BINTRAY_API_KEY")
    configurations = ['archives']
    dryRun = false //Whether to run this as dry-run, without deploying
    publish = true //If version should be auto published after an upload
    //Package configuration. The plugin will use the repo and name properties to check if the package already exists. In that case, there's no need to configure the other package properties (like userOrg, desc, etc).

    pkg {
        repo = "maven"
        name = optProperty("POM_GROUP_ID") +":"+ optProperty("POM_ARTIFACT_ID")
        userOrg = optProperty("BINTRAY_USER")
        websiteUrl = optProperty("POM_URL")
        issueTrackerUrl = optProperty("POM_ISSUE_MANAGEMENT_URL")
        vcsUrl = optProperty("POM_SCM_URL")
        licenses = ['Apache-2.0']
        labels = []
        version {
            name = optProperty("POM_VERSION")
            desc = optProperty("POM_DESCRIPTION")
            vcsTag = optProperty("POM_VERSION")
            publicDownloadNumbers = true
            //attributes = ['gradle-plugin': 'com.use.less:com.use.less.gradle:gradle-useless-plugin']
            //Optional configuration for GPG signing
            gpg {
                sign = true //Determines whether to GPG sign the files. The default is false
                passphrase = optProperty("signing.password") //Optional. The passphrase for GPG signing'
            }
            //Optional configuration for Maven Central sync of the version
            mavenCentralSync {
                sync = true //Optional (true by default). Determines whether to sync the version to Maven Central.
                user = optProperty("MAVEN_DEPLOY_USERNAME") //OSS user token
                password = optProperty("MAVEN_DEPLOY_PASSWORD") //OSS user password
                close = '1' //Optional property. By default the staging repository is closed and artifacts are released to Maven Central. You can optionally turn this behaviour off (by puting 0 as value) and release the version manually.
            }
        }
    }
}

task androidReleaseJar(type: Jar,dependsOn: "assembleRelease") {
    from "$buildDir/intermediates/classes/release/"
    exclude '**/BuildConfig.class'
    exclude '**/R.class'
    exclude '**/R$*.class'
}

task androidJavadocsJar(type: Jar) {
    classifier = 'javadoc'
    from "generateReleaseJavadoc.destinationDir"
}

task androidSourcesJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.srcDirs
}

artifacts {
    archives androidReleaseJar
    archives androidSourcesJar
    archives androidJavadocsJar
}

private configurePOM(def pom) {
    pom.project {
        groupId optProperty("POM_GROUP_ID")
        artifactId optProperty("POM_ARTIFACT_ID")
        version optProperty("POM_VERSION")
        name optProperty("POM_NAME")
        packaging optProperty("POM_PACKAGING")
        description optProperty("POM_DESCRIPTION")
        url optProperty("POM_URL")
        inceptionYear optProperty("POM_INCEPTION_YEAR")

        scm {
            url optProperty("POM_SCM_URL")
            connection optProperty("POM_SCM_CONNECTION")
            developerConnection optProperty("POM_SCM_DEV_CONNECTION")
        }

        licenses {
            license {
                name optProperty("POM_LICENCE_NAME")
                url optProperty("POM_LICENCE_URL")
                distribution optProperty("POM_LICENCE_DIST")
                comments optProperty("POM_LICENCE_COMMENTS")
            }
        }

        developers {
            developer {
                id optProperty("POM_DEVELOPER_ID")
                name optProperty("POM_DEVELOPER_NAME")
                email optProperty("POM_DEVELOPER_EMAIL")
                url optProperty("POM_DEVELOPER_URL")
            }
        }

        issueManagement {
            system optProperty("POM_ISSUE_MANAGEMENT_SYSTEM")
            url optProperty("POM_ISSUE_MANAGEMENT_URL")
        }
    }
}
